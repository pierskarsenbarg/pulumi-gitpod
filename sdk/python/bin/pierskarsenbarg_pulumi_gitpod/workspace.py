# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkspaceArgs', 'Workspace']

@pulumi.input_type
class WorkspaceArgs:
    def __init__(__self__, *,
                 context_url: pulumi.Input[str],
                 class_: Optional[pulumi.Input['WorkspaceClass']] = None,
                 editor: Optional[pulumi.Input['WorkspaceEditorArgs']] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workspace resource.
        :param pulumi.Input['WorkspaceClass'] class_: Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
        :param pulumi.Input['WorkspaceEditorArgs'] editor: Choose which editor you want to be able to use.
        :param pulumi.Input[str] organization_id: Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
        :param pulumi.Input[str] owner_id: Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
        """
        pulumi.set(__self__, "context_url", context_url)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if editor is not None:
            pulumi.set(__self__, "editor", editor)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)

    @property
    @pulumi.getter(name="contextUrl")
    def context_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context_url")

    @context_url.setter
    def context_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "context_url", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input['WorkspaceClass']]:
        """
        Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input['WorkspaceClass']]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter
    def editor(self) -> Optional[pulumi.Input['WorkspaceEditorArgs']]:
        """
        Choose which editor you want to be able to use.
        """
        return pulumi.get(self, "editor")

    @editor.setter
    def editor(self, value: Optional[pulumi.Input['WorkspaceEditorArgs']]):
        pulumi.set(self, "editor", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)


class Workspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_: Optional[pulumi.Input['WorkspaceClass']] = None,
                 context_url: Optional[pulumi.Input[str]] = None,
                 editor: Optional[pulumi.Input[pulumi.InputType['WorkspaceEditorArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Gitpod workspace

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['WorkspaceClass'] class_: Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
        :param pulumi.Input[pulumi.InputType['WorkspaceEditorArgs']] editor: Choose which editor you want to be able to use.
        :param pulumi.Input[str] organization_id: Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
        :param pulumi.Input[str] owner_id: Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Gitpod workspace

        :param str resource_name: The name of the resource.
        :param WorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_: Optional[pulumi.Input['WorkspaceClass']] = None,
                 context_url: Optional[pulumi.Input[str]] = None,
                 editor: Optional[pulumi.Input[pulumi.InputType['WorkspaceEditorArgs']]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

            __props__.__dict__["class_"] = class_
            if context_url is None and not opts.urn:
                raise TypeError("Missing required property 'context_url'")
            __props__.__dict__["context_url"] = context_url
            __props__.__dict__["editor"] = editor
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["git_info"] = None
            __props__.__dict__["metadata"] = None
            __props__.__dict__["spec"] = None
            __props__.__dict__["workspace_id"] = None
        super(Workspace, __self__).__init__(
            'gitpod:index:Workspace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workspace':
        """
        Get an existing Workspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkspaceArgs.__new__(WorkspaceArgs)

        __props__.__dict__["git_info"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["spec"] = None
        __props__.__dict__["workspace_id"] = None
        return Workspace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="gitInfo")
    def git_info(self) -> pulumi.Output['outputs.WorkspaceStateGitInfo']:
        """
        The information from git used to build the workspace
        """
        return pulumi.get(self, "git_info")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.WorkspaceStateMetaData']:
        """
        The metadata of the workspace
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.WorkspaceStateSpec']:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The ID of the workspace
        """
        return pulumi.get(self, "workspace_id")

