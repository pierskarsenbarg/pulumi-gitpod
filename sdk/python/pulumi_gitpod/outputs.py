# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'WorkspaceStateGitInfo',
    'WorkspaceStateMetaData',
    'WorkspaceStateSpec',
    'WorkspaceStateSpecEditor',
]

@pulumi.output_type
class WorkspaceStateGitInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloneUrl":
            suggest = "clone_url"
        elif key == "latestCommit":
            suggest = "latest_commit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceStateGitInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceStateGitInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceStateGitInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: str,
                 clone_url: str,
                 latest_commit: str):
        """
        :param str branch: Git branch used to create the workspace
        :param str clone_url: The git clone url used to create the workspace
        :param str latest_commit: The commit hash used to create the workspace
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "clone_url", clone_url)
        pulumi.set(__self__, "latest_commit", latest_commit)

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        Git branch used to create the workspace
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="cloneUrl")
    def clone_url(self) -> str:
        """
        The git clone url used to create the workspace
        """
        return pulumi.get(self, "clone_url")

    @property
    @pulumi.getter(name="latestCommit")
    def latest_commit(self) -> str:
        """
        The commit hash used to create the workspace
        """
        return pulumi.get(self, "latest_commit")


@pulumi.output_type
class WorkspaceStateMetaData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "originalContextUrl":
            suggest = "original_context_url"
        elif key == "ownerId":
            suggest = "owner_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceStateMetaData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceStateMetaData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceStateMetaData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 name: str,
                 organization_id: str,
                 original_context_url: str,
                 owner_id: str):
        """
        :param str name: The name of the workspace
        :param str organization_id: The ID of the organization that the workspace belongs to
        :param str original_context_url: The original context URL of the workspace
        :param str owner_id: The ID of the user that owns the workspace
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "original_context_url", original_context_url)
        pulumi.set(__self__, "owner_id", owner_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workspace
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The ID of the organization that the workspace belongs to
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="originalContextUrl")
    def original_context_url(self) -> str:
        """
        The original context URL of the workspace
        """
        return pulumi.get(self, "original_context_url")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        The ID of the user that owns the workspace
        """
        return pulumi.get(self, "owner_id")


@pulumi.output_type
class WorkspaceStateSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceStateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceStateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceStateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_: str,
                 editor: 'outputs.WorkspaceStateSpecEditor'):
        """
        :param 'WorkspaceStateSpecEditor' editor: The IDE that has been chosen
        """
        pulumi.set(__self__, "class_", class_)
        pulumi.set(__self__, "editor", editor)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def editor(self) -> 'outputs.WorkspaceStateSpecEditor':
        """
        The IDE that has been chosen
        """
        return pulumi.get(self, "editor")


@pulumi.output_type
class WorkspaceStateSpecEditor(dict):
    def __init__(__self__, *,
                 name: str,
                 version: str):
        """
        :param str name: Name of IDE that is being used in the workspace
        :param str version: Version of the IDE that is being used in the workspace
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of IDE that is being used in the workspace
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the IDE that is being used in the workspace
        """
        return pulumi.get(self, "version")


