// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * Gitpod workspace
 */
export class Workspace extends pulumi.CustomResource {
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workspace {
        return new Workspace(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitpod:index:Workspace';

    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }

    /**
     * The information from git used to build the workspace
     */
    public /*out*/ readonly gitInfo!: pulumi.Output<outputs.WorkspaceStateGitInfo>;
    /**
     * The metadata of the workspace
     */
    public /*out*/ readonly metadata!: pulumi.Output<outputs.WorkspaceStateMetaData>;
    public /*out*/ readonly spec!: pulumi.Output<outputs.WorkspaceStateSpec>;
    /**
     * The ID of the workspace
     */
    public /*out*/ readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Workspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.contextUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contextUrl'");
            }
            resourceInputs["class"] = args ? args.class : undefined;
            resourceInputs["contextUrl"] = args ? args.contextUrl : undefined;
            resourceInputs["editor"] = args ? (args.editor ? pulumi.output(args.editor).apply(inputs.workspaceEditorArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["gitInfo"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        } else {
            resourceInputs["gitInfo"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workspace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Workspace resource.
 */
export interface WorkspaceArgs {
    /**
     * Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
     */
    class?: pulumi.Input<enums.WorkspaceClass>;
    contextUrl: pulumi.Input<string>;
    /**
     * Choose which editor you want to be able to use.
     */
    editor?: pulumi.Input<inputs.WorkspaceEditorArgs>;
    /**
     * Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
     */
    ownerId?: pulumi.Input<string>;
}
