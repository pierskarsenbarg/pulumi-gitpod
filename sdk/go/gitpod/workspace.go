// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitpod

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-gitpod/sdk/go/gitpod/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gitpod workspace
type Workspace struct {
	pulumi.CustomResourceState

	// The information from git used to build the workspace
	GitInfo pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput] `pulumi:"gitInfo"`
	// The metadata of the workspace
	Metadata pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput] `pulumi:"metadata"`
	Spec     pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput]         `pulumi:"spec"`
	// The ID of the workspace
	WorkspaceId pulumix.Output[string] `pulumi:"workspaceId"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContextUrl == nil {
		return nil, errors.New("invalid value for required argument 'ContextUrl'")
	}
	if args.Editor != nil {
		args.Editor = pulumix.Apply(args.Editor, func(o *WorkspaceEditorArgs) *WorkspaceEditorArgs { return o.Defaults() })
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("gitpod:index:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("gitpod:index:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
}

type WorkspaceState struct {
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
	Class      *WorkspaceClass `pulumi:"class"`
	ContextUrl string          `pulumi:"contextUrl"`
	// Choose which editor you want to be able to use.
	Editor *WorkspaceEditor `pulumi:"editor"`
	// Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
	OrganizationId *string `pulumi:"organizationId"`
	// Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
	OwnerId *string `pulumi:"ownerId"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
	Class      pulumix.Input[*WorkspaceClass]
	ContextUrl pulumix.Input[string]
	// Choose which editor you want to be able to use.
	Editor pulumix.Input[*WorkspaceEditorArgs]
	// Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
	OrganizationId pulumix.Input[*string]
	// Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
	OwnerId pulumix.Input[*string]
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToOutput(ctx context.Context) pulumix.Output[Workspace] {
	return pulumix.Output[Workspace]{
		OutputState: o.OutputState,
	}
}

// The information from git used to build the workspace
func (o WorkspaceOutput) GitInfo() pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput] {
		return v.GitInfo
	})
	unwrapped := pulumix.Flatten[*WorkspaceStateGitInfo, pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput]](value)
	return pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput]{OutputState: unwrapped.OutputState}
}

// The metadata of the workspace
func (o WorkspaceOutput) Metadata() pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput] {
		return v.Metadata
	})
	unwrapped := pulumix.Flatten[*WorkspaceStateMetaData, pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput]](value)
	return pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput]{OutputState: unwrapped.OutputState}
}

func (o WorkspaceOutput) Spec() pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput] { return v.Spec })
	unwrapped := pulumix.Flatten[*WorkspaceStateSpec, pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput]](value)
	return pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the workspace
func (o WorkspaceOutput) WorkspaceId() pulumix.Output[string] {
	value := pulumix.Apply[Workspace](o, func(v Workspace) pulumix.Output[string] { return v.WorkspaceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceOutput{})
}
