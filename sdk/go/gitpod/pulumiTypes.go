// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitpod

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-gitpod/sdk/go/gitpod/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type WorkspaceEditor struct {
	// Name of the editor that you'd like to use in your Gitpod workspace. Defaults to VS Code desktop.
	Name *EditorName `pulumi:"name"`
	// Version of editor to use. Options are `latest` or `stable`. Defaults to `stable`
	Version *EditorVersion `pulumi:"version"`
}

// Defaults sets the appropriate defaults for WorkspaceEditor
func (val *WorkspaceEditor) Defaults() *WorkspaceEditor {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		name_ := EditorName("code")
		tmp.Name = &name_
	}
	if tmp.Version == nil {
		version_ := EditorVersion("stable")
		tmp.Version = &version_
	}
	return &tmp
}

type WorkspaceEditorArgs struct {
	// Name of the editor that you'd like to use in your Gitpod workspace. Defaults to VS Code desktop.
	Name pulumix.Input[*EditorName] `pulumi:"name"`
	// Version of editor to use. Options are `latest` or `stable`. Defaults to `stable`
	Version pulumix.Input[*EditorVersion] `pulumi:"version"`
}

// Defaults sets the appropriate defaults for WorkspaceEditorArgs
func (val *WorkspaceEditorArgs) Defaults() *WorkspaceEditorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Name == nil {
		tmp.Name = pulumix.Ptr(EditorName("code"))
	}
	if tmp.Version == nil {
		tmp.Version = pulumix.Ptr(EditorVersion("stable"))
	}
	return &tmp
}
func (WorkspaceEditorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceEditor)(nil)).Elem()
}

func (i WorkspaceEditorArgs) ToWorkspaceEditorOutput() WorkspaceEditorOutput {
	return i.ToWorkspaceEditorOutputWithContext(context.Background())
}

func (i WorkspaceEditorArgs) ToWorkspaceEditorOutputWithContext(ctx context.Context) WorkspaceEditorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceEditorOutput)
}

func (i *WorkspaceEditorArgs) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceEditorArgs] {
	return pulumix.Val(i)
}

type WorkspaceEditorOutput struct{ *pulumi.OutputState }

func (WorkspaceEditorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceEditor)(nil)).Elem()
}

func (o WorkspaceEditorOutput) ToWorkspaceEditorOutput() WorkspaceEditorOutput {
	return o
}

func (o WorkspaceEditorOutput) ToWorkspaceEditorOutputWithContext(ctx context.Context) WorkspaceEditorOutput {
	return o
}

func (o WorkspaceEditorOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceEditor] {
	return pulumix.Output[WorkspaceEditor]{
		OutputState: o.OutputState,
	}
}

// Name of the editor that you'd like to use in your Gitpod workspace. Defaults to VS Code desktop.
func (o WorkspaceEditorOutput) Name() pulumix.Output[*EditorName] {
	return pulumix.Apply[WorkspaceEditor](o, func(v WorkspaceEditor) *EditorName { return v.Name })
}

// Version of editor to use. Options are `latest` or `stable`. Defaults to `stable`
func (o WorkspaceEditorOutput) Version() pulumix.Output[*EditorVersion] {
	return pulumix.Apply[WorkspaceEditor](o, func(v WorkspaceEditor) *EditorVersion { return v.Version })
}

type WorkspaceStateGitInfo struct {
	// Git branch used to create the workspace
	Branch string `pulumi:"branch"`
	// The git clone url used to create the workspace
	CloneUrl string `pulumi:"cloneUrl"`
	// The commit hash used to create the workspace
	LatestCommit string `pulumi:"latestCommit"`
}

type WorkspaceStateGitInfoOutput struct{ *pulumi.OutputState }

func (WorkspaceStateGitInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceStateGitInfo)(nil)).Elem()
}

func (o WorkspaceStateGitInfoOutput) ToWorkspaceStateGitInfoOutput() WorkspaceStateGitInfoOutput {
	return o
}

func (o WorkspaceStateGitInfoOutput) ToWorkspaceStateGitInfoOutputWithContext(ctx context.Context) WorkspaceStateGitInfoOutput {
	return o
}

func (o WorkspaceStateGitInfoOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceStateGitInfo] {
	return pulumix.Output[WorkspaceStateGitInfo]{
		OutputState: o.OutputState,
	}
}

// Git branch used to create the workspace
func (o WorkspaceStateGitInfoOutput) Branch() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateGitInfo](o, func(v WorkspaceStateGitInfo) string { return v.Branch })
}

// The git clone url used to create the workspace
func (o WorkspaceStateGitInfoOutput) CloneUrl() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateGitInfo](o, func(v WorkspaceStateGitInfo) string { return v.CloneUrl })
}

// The commit hash used to create the workspace
func (o WorkspaceStateGitInfoOutput) LatestCommit() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateGitInfo](o, func(v WorkspaceStateGitInfo) string { return v.LatestCommit })
}

type WorkspaceStateMetaData struct {
	InstanceId string `pulumi:"instanceId"`
	// The name of the workspace
	Name string `pulumi:"name"`
	// The ID of the organization that the workspace belongs to
	OrganizationId string `pulumi:"organizationId"`
	// The original context URL of the workspace
	OriginalContextUrl string `pulumi:"originalContextUrl"`
	// The ID of the user that owns the workspace
	OwnerId string `pulumi:"ownerId"`
}

type WorkspaceStateMetaDataOutput struct{ *pulumi.OutputState }

func (WorkspaceStateMetaDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceStateMetaData)(nil)).Elem()
}

func (o WorkspaceStateMetaDataOutput) ToWorkspaceStateMetaDataOutput() WorkspaceStateMetaDataOutput {
	return o
}

func (o WorkspaceStateMetaDataOutput) ToWorkspaceStateMetaDataOutputWithContext(ctx context.Context) WorkspaceStateMetaDataOutput {
	return o
}

func (o WorkspaceStateMetaDataOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceStateMetaData] {
	return pulumix.Output[WorkspaceStateMetaData]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceStateMetaDataOutput) InstanceId() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateMetaData](o, func(v WorkspaceStateMetaData) string { return v.InstanceId })
}

// The name of the workspace
func (o WorkspaceStateMetaDataOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateMetaData](o, func(v WorkspaceStateMetaData) string { return v.Name })
}

// The ID of the organization that the workspace belongs to
func (o WorkspaceStateMetaDataOutput) OrganizationId() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateMetaData](o, func(v WorkspaceStateMetaData) string { return v.OrganizationId })
}

// The original context URL of the workspace
func (o WorkspaceStateMetaDataOutput) OriginalContextUrl() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateMetaData](o, func(v WorkspaceStateMetaData) string { return v.OriginalContextUrl })
}

// The ID of the user that owns the workspace
func (o WorkspaceStateMetaDataOutput) OwnerId() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateMetaData](o, func(v WorkspaceStateMetaData) string { return v.OwnerId })
}

type WorkspaceStateSpec struct {
	Class string `pulumi:"class"`
	// The IDE that has been chosen
	Editor *WorkspaceStateSpecEditor `pulumi:"editor"`
}

type WorkspaceStateSpecOutput struct{ *pulumi.OutputState }

func (WorkspaceStateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceStateSpec)(nil)).Elem()
}

func (o WorkspaceStateSpecOutput) ToWorkspaceStateSpecOutput() WorkspaceStateSpecOutput {
	return o
}

func (o WorkspaceStateSpecOutput) ToWorkspaceStateSpecOutputWithContext(ctx context.Context) WorkspaceStateSpecOutput {
	return o
}

func (o WorkspaceStateSpecOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceStateSpec] {
	return pulumix.Output[WorkspaceStateSpec]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceStateSpecOutput) Class() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateSpec](o, func(v WorkspaceStateSpec) string { return v.Class })
}

// The IDE that has been chosen
func (o WorkspaceStateSpecOutput) Editor() pulumix.GPtrOutput[WorkspaceStateSpecEditor, WorkspaceStateSpecEditorOutput] {
	value := pulumix.Apply[WorkspaceStateSpec](o, func(v WorkspaceStateSpec) *WorkspaceStateSpecEditor { return v.Editor })
	return pulumix.GPtrOutput[WorkspaceStateSpecEditor, WorkspaceStateSpecEditorOutput]{OutputState: value.OutputState}
}

type WorkspaceStateSpecEditor struct {
	// Name of IDE that is being used in the workspace
	Name string `pulumi:"name"`
	// Version of the IDE that is being used in the workspace
	Version string `pulumi:"version"`
}

type WorkspaceStateSpecEditorOutput struct{ *pulumi.OutputState }

func (WorkspaceStateSpecEditorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceStateSpecEditor)(nil)).Elem()
}

func (o WorkspaceStateSpecEditorOutput) ToWorkspaceStateSpecEditorOutput() WorkspaceStateSpecEditorOutput {
	return o
}

func (o WorkspaceStateSpecEditorOutput) ToWorkspaceStateSpecEditorOutputWithContext(ctx context.Context) WorkspaceStateSpecEditorOutput {
	return o
}

func (o WorkspaceStateSpecEditorOutput) ToOutput(ctx context.Context) pulumix.Output[WorkspaceStateSpecEditor] {
	return pulumix.Output[WorkspaceStateSpecEditor]{
		OutputState: o.OutputState,
	}
}

// Name of IDE that is being used in the workspace
func (o WorkspaceStateSpecEditorOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateSpecEditor](o, func(v WorkspaceStateSpecEditor) string { return v.Name })
}

// Version of the IDE that is being used in the workspace
func (o WorkspaceStateSpecEditorOutput) Version() pulumix.Output[string] {
	return pulumix.Apply[WorkspaceStateSpecEditor](o, func(v WorkspaceStateSpecEditor) string { return v.Version })
}

func init() {
	pulumi.RegisterOutputType(WorkspaceEditorOutput{})
	pulumi.RegisterOutputType(WorkspaceStateGitInfoOutput{})
	pulumi.RegisterOutputType(WorkspaceStateMetaDataOutput{})
	pulumi.RegisterOutputType(WorkspaceStateSpecOutput{})
	pulumi.RegisterOutputType(WorkspaceStateSpecEditorOutput{})
}
