// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gitpod

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-gitpod/sdk/go/gitpod/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceResult
	err := ctx.Invoke("gitpod:index:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkspaceArgs struct {
}

type LookupWorkspaceResult struct {
	// The information from git used to build the workspace
	GitInfo WorkspaceStateGitInfo `pulumi:"gitInfo"`
	// The metadata of the workspace
	Metadata WorkspaceStateMetaData `pulumi:"metadata"`
	Spec     WorkspaceStateSpec     `pulumi:"spec"`
	// The ID of the workspace
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupWorkspaceOutput(ctx *pulumi.Context, args LookupWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupWorkspaceArgs](args.ToOutput(), func(plainArgs *LookupWorkspaceArgs) (*LookupWorkspaceResult, error) {
		return LookupWorkspace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupWorkspaceResultOutput, *LookupWorkspaceResult](outputResult)
}

type LookupWorkspaceOutputArgs struct {
}

func (args LookupWorkspaceOutputArgs) ToOutput() pulumix.Output[*LookupWorkspaceArgs] {
	allArgs := pulumix.All()
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupWorkspaceArgs {
		return &LookupWorkspaceArgs{}
	})
}

type LookupWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceResult)(nil)).Elem()
}

func (o LookupWorkspaceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupWorkspaceResult] {
	return pulumix.Output[*LookupWorkspaceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) GitInfo() pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) WorkspaceStateGitInfo { return v.GitInfo })
	return pulumix.GPtrOutput[WorkspaceStateGitInfo, WorkspaceStateGitInfoOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) Metadata() pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) WorkspaceStateMetaData { return v.Metadata })
	return pulumix.GPtrOutput[WorkspaceStateMetaData, WorkspaceStateMetaDataOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) Spec() pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput] {
	value := pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) WorkspaceStateSpec { return v.Spec })
	return pulumix.GPtrOutput[WorkspaceStateSpec, WorkspaceStateSpecOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupWorkspaceResultOutput) WorkspaceId() pulumix.Output[string] {
	return pulumix.Apply[*LookupWorkspaceResult](o, func(v *LookupWorkspaceResult) string { return v.WorkspaceId })
}
