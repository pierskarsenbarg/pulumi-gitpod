// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Gitpod
{
    /// <summary>
    /// Gitpod workspace
    /// </summary>
    [GitpodResourceType("gitpod:index:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The information from git used to build the workspace
        /// </summary>
        [Output("gitInfo")]
        public Output<Outputs.WorkspaceStateGitInfo> GitInfo { get; private set; } = null!;

        /// <summary>
        /// The metadata of the workspace
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.WorkspaceStateMetaData> Metadata { get; private set; } = null!;

        [Output("spec")]
        public Output<Outputs.WorkspaceStateSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("gitpod:index:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("gitpod:index:Workspace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-gitpod",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Define the compute resources that you want your workspace to use. Defaults to `g1-standard`.
        /// </summary>
        [Input("class")]
        public Input<PiersKarsenbarg.Gitpod.WorkspaceClass>? Class { get; set; }

        [Input("contextUrl", required: true)]
        public Input<string> ContextUrl { get; set; } = null!;

        /// <summary>
        /// Choose which editor you want to be able to use.
        /// </summary>
        [Input("editor")]
        public Input<Inputs.WorkspaceEditorArgs>? Editor { get; set; }

        /// <summary>
        /// Set the Organization Id of the workspace. If not set then the Organization ID from the stack config will be used.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// Set the Owner Id of the workspace. If not set then the Owner ID from the stack config will be used.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }
}
