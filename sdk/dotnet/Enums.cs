// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Gitpod
{
    [EnumType]
    public readonly struct EditorName : IEquatable<EditorName>
    {
        private readonly string _value;

        private EditorName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Code { get; } = new EditorName("code");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Code_desktop { get; } = new EditorName("code-desktop");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Intellij { get; } = new EditorName("intellij");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Goland { get; } = new EditorName("goland");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Phpstorm { get; } = new EditorName("phpstorm");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Pycharm { get; } = new EditorName("pycharm");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Rubymine { get; } = new EditorName("rubymine");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Webstorm { get; } = new EditorName("webstorm");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Rider { get; } = new EditorName("rider");
        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorName Clion { get; } = new EditorName("clion");

        public static bool operator ==(EditorName left, EditorName right) => left.Equals(right);
        public static bool operator !=(EditorName left, EditorName right) => !left.Equals(right);

        public static explicit operator string(EditorName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EditorName other && Equals(other);
        public bool Equals(EditorName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EditorVersion : IEquatable<EditorVersion>
    {
        private readonly string _value;

        private EditorVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static EditorVersion Latest { get; } = new EditorVersion("latest");
        /// <summary>
        /// Standard workspace class - up to 4 cores, up to 8GB RAM, 30GB storage
        /// </summary>
        public static EditorVersion Stable { get; } = new EditorVersion("stable");

        public static bool operator ==(EditorVersion left, EditorVersion right) => left.Equals(right);
        public static bool operator !=(EditorVersion left, EditorVersion right) => !left.Equals(right);

        public static explicit operator string(EditorVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EditorVersion other && Equals(other);
        public bool Equals(EditorVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkspaceClass : IEquatable<WorkspaceClass>
    {
        private readonly string _value;

        private WorkspaceClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Large workspace class - up to 8 cores, up to 16GB RAM, 50GB storage.
        /// </summary>
        public static WorkspaceClass G1_large { get; } = new WorkspaceClass("g1-large");
        /// <summary>
        /// Standard workspace class - up to 4 cores, up to 8GB RAM, 30GB storage
        /// </summary>
        public static WorkspaceClass G1_standard { get; } = new WorkspaceClass("g1-standard");

        public static bool operator ==(WorkspaceClass left, WorkspaceClass right) => left.Equals(right);
        public static bool operator !=(WorkspaceClass left, WorkspaceClass right) => !left.Equals(right);

        public static explicit operator string(WorkspaceClass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceClass other && Equals(other);
        public bool Equals(WorkspaceClass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
